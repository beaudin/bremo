package bremoswing.graphik;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.Random;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.JComboBox;

import bremo.main.Bremo;
import bremoExceptions.ParameterFileWrongInputException;
import bremoswing.SwingBremo;
import bremoswing.util.ExtensionFileFilter;

/**
 *
 * @author Beaudin
 */
public  class SelectItemToPlotten extends JFrame {
   
	public static boolean pupUp ;
	
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form SelectItemToPlotten
     */
    public SelectItemToPlotten() {
        initComponents();
        SwingBremo.placeFrame(this);
        pupUp = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({ "serial" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new JPanel(){
			public void paintComponent(Graphics g) 
            {
              
				URL url = getClass().getResource("/bremoswing/bild/Abstract_Frozen_Blue.jpg");
				ImageIcon icon = new ImageIcon(url);
			    Image img = icon.getImage();
			    BufferedImage buffImage = 
			    	      new BufferedImage(
			    	          img.getWidth(null), 
			    	          img.getHeight(null), 
			    	          BufferedImage.TYPE_INT_ARGB);
			    Graphics gr = buffImage.getGraphics();
			    gr.drawImage(img, 0, 0, null);
			    img = buffImage.getSubimage(200, 210, 500, 100);
				g.drawImage(img, 0, 0, null);
                
            } 
		};
        fileComboBox = new JComboBox();
        
        ButtonOK = new JButton("OK");
        ButtonOK.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
        		if (fileComboBox.getSelectedItem().toString().equals("Calculation not made! Choose a file to show ?")) {
        			
        		}
        		else {
				        plott();
        		}
			}
		});
        setResizable(false);
        setIconImage(new ImageIcon(getClass().getResource(
				"/bremoswing/bild/bremo1.png")).getImage());
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Choose to plott");
        jPanel1.setBorder(BorderFactory.createTitledBorder("Bitte Input File zu plotten wählen"));

       // fileComboBox.setModel(new DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        String[] tmp = SwingBremo.bremoThreadFertig;
        addFileItemToComboBox(fileComboBox, tmp);
        fileComboBox.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				//plott();
			}
		});
        fileComboBox.addKeyListener(new KeyAdapter() {
            @Override 
        	public void keyPressed (KeyEvent e){
            	 
            	if (e.getKeyCode() == KeyEvent.VK_ENTER){
            		if (fileComboBox.getSelectedItem().toString().equals("Calculation not made! Choose a file to show ?")) {
            			
            		}
            		else {
    				        plott();
            		}

            	}
             }
		});
        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                //.addContainerGap()
                .addComponent(fileComboBox, GroupLayout.PREFERRED_SIZE, 297, GroupLayout.PREFERRED_SIZE)
                .addComponent(ButtonOK,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE))
                //.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
            	.addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
            	        .addComponent(fileComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(ButtonOK,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>
    
    /**
	 * füge elemente von Array to JComboBox als Item hinzu. Nur für File
	 * ComboBox
	 */
	public void addFileItemToComboBox(JComboBox cb, String[] item) {
		cb.removeAllItems();
		if (item[0] == null) {
			item[0] = "Calculation not made! Choose a file to show ?";
		}
		cb.setModel(new JComboBox(item).getModel());
		  
	}
	
	public void plott(){
		    
		    try {
		    	File input = new File(SwingBremo.path+"/"+fileComboBox.getSelectedItem().toString());
		        String berechnungModell = "";
		        boolean is_RestgasVorgabe_LWA = false;
		        BufferedReader in = new BufferedReader(new FileReader(input.getPath()));
				String zeile = null;
				String [] header = null;
				while((zeile = in.readLine()) != null) {
					zeile=zeile.replaceAll(" ", "");
					zeile=zeile.replaceAll("\t", "");
					header = zeile.split(":");
					header[0] = header[0].replace("[", "");
					if (header[0].equals("berechnungsModell")){
						String[] tmp =  header[1].split("_");
						if (tmp[0].equals("DVA")){
							berechnungModell = "DVA";
						}
						else if (tmp[0].equals("APR")){
							berechnungModell = "APR";
						}
					}
					if (header[0].equals("RestgasVorgabeLWA")){
						is_RestgasVorgabe_LWA = true;
					}
				}
				// new bremoGraphik(input);
				if (berechnungModell.equals("DVA")){
					
					new DVA_ModellGraphik(input,is_RestgasVorgabe_LWA);
				}
				else if  (berechnungModell.equals("APR")){
					
					new APR_ModellGraphik(input, is_RestgasVorgabe_LWA); 
				}
				in.close();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ParameterFileWrongInputException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NullPointerException e){
				
			}
	}
	
	void choose_and_ploot() {
		
//		JFileChooser fileChooser = new JFileChooser(".");
//		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
//		fileChooser.setMultiSelectionEnabled(false);
//		ExtensionFileFilter txtFilter = new ExtensionFileFilter(null,
//				new String[] { "txt" });
//
//		fileChooser.addChoosableFileFilter(txtFilter);
//		try {
//			int status = fileChooser.showOpenDialog(getRootPane());
//
//			if (status == JFileChooser.APPROVE_OPTION) {
//				if (fileChooser.getSelectedFile() != null) {
//					File file = fileChooser.getSelectedFile();
//					String fileName = file.getName();
//					String Modell = fileName.split("_")[0];
//					
//					freiMode = new BremoUltimateView(file);
//					currentPath = file.getParent();
//					TitelLabel.setText(fileName.substring(0,fileName.indexOf(".")));
//					BremoGraphicUpdate();
//				}
//			} else if (status == JFileChooser.CANCEL_OPTION) {
//
//				fileChooser.cancelSelection();
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
	}
	
	
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectItemToPlotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectItemToPlotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectItemToPlotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectItemToPlotten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SelectItemToPlotten().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private JComboBox fileComboBox;
    private JPanel jPanel1;
    private JButton ButtonOK;
    // End of variables declaration
}
